/* tslint:disable */
/* eslint-disable */
/**
 * InstaResume.WebApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CertificateObject
 */
export interface CertificateObject {
    /**
     * 
     * @type {string}
     * @memberof CertificateObject
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CertificateObject
     */
    'credentialUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CertificateObject
     */
    'description'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CertificateObject
     */
    'skills'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface CreateResumeRequest
 */
export interface CreateResumeRequest {
    /**
     * 
     * @type {any}
     * @memberof CreateResumeRequest
     */
    'replacements'?: any | null;
}
/**
 * 
 * @export
 * @interface EducationObject
 */
export interface EducationObject {
    /**
     * 
     * @type {string}
     * @memberof EducationObject
     */
    'major'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EducationObject
     */
    'degree'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EducationObject
     */
    'school'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EducationObject
     */
    'startDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EducationObject
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EducationObject
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof EducationObject
     */
    'isCurrentlyStudying'?: boolean;
}
/**
 * 
 * @export
 * @interface GeneratedDescription
 */
export interface GeneratedDescription {
    /**
     * 
     * @type {Array<string>}
     * @memberof GeneratedDescription
     */
    'keywords'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof GeneratedDescription
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface GetGenDescriptionRequest
 */
export interface GetGenDescriptionRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetGenDescriptionRequest
     */
    'keywords'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof GetGenDescriptionRequest
     */
    'draftDescription'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetGenDescriptionRequest
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetGenDescriptionRequest
     */
    'jobPosition'?: string | null;
}
/**
 * 
 * @export
 * @interface JwtToken
 */
export interface JwtToken {
    /**
     * 
     * @type {string}
     * @memberof JwtToken
     */
    'tokenType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JwtToken
     */
    'accessToken'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JwtToken
     */
    'refreshToken'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof JwtToken
     */
    'expiresIn'?: number;
}
/**
 * 
 * @export
 * @interface ProjectObject
 */
export interface ProjectObject {
    /**
     * 
     * @type {string}
     * @memberof ProjectObject
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjectObject
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjectObject
     */
    'startDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjectObject
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectObject
     */
    'links'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface ResumeData
 */
export interface ResumeData {
    /**
     * 
     * @type {string}
     * @memberof ResumeData
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResumeData
     */
    'ownerId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResumeData
     */
    'templateUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResumeData
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResumeData
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResumeData
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResumeData
     */
    'phone'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResumeData
     */
    'socialLinks'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof ResumeData
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResumeData
     */
    'country'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResumeData
     */
    'professionalSummary'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResumeData
     */
    'skills'?: Array<string> | null;
    /**
     * 
     * @type {Array<WorkExperienceObject>}
     * @memberof ResumeData
     */
    'workExperience'?: Array<WorkExperienceObject> | null;
    /**
     * 
     * @type {Array<EducationObject>}
     * @memberof ResumeData
     */
    'education'?: Array<EducationObject> | null;
    /**
     * 
     * @type {Array<ProjectObject>}
     * @memberof ResumeData
     */
    'projects'?: Array<ProjectObject> | null;
    /**
     * 
     * @type {Array<CertificateObject>}
     * @memberof ResumeData
     */
    'certificates'?: Array<CertificateObject> | null;
}
/**
 * 
 * @export
 * @interface TemplateData
 */
export interface TemplateData {
    /**
     * 
     * @type {string}
     * @memberof TemplateData
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TemplateData
     */
    'fileName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TemplateData
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TemplateData
     */
    'thumbnailUrl'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TemplateData
     */
    'score'?: number;
}
/**
 * 
 * @export
 * @interface TemplateSourceResponse
 */
export interface TemplateSourceResponse {
    /**
     * 
     * @type {string}
     * @memberof TemplateSourceResponse
     */
    'source'?: string | null;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string | null;
}
/**
 * 
 * @export
 * @interface UserLoginRequest
 */
export interface UserLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof UserLoginRequest
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserLoginRequest
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface UserRegisterRequest
 */
export interface UserRegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof UserRegisterRequest
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterRequest
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterRequest
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface WorkExperienceObject
 */
export interface WorkExperienceObject {
    /**
     * 
     * @type {string}
     * @memberof WorkExperienceObject
     */
    'jobTitle'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkExperienceObject
     */
    'position'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkExperienceObject
     */
    'employer'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkExperienceObject
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkExperienceObject
     */
    'startDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkExperienceObject
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkExperienceObject
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof WorkExperienceObject
     */
    'isCurrentlyWorking'?: boolean;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserLoginRequest} [userLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost: async (userLoginRequest?: UserLoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authMyInfoGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Auth/myInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserRegisterRequest} [userRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterPost: async (userRegisterRequest?: UserRegisterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRegisterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserLoginRequest} [userLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginPost(userLoginRequest?: UserLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JwtToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(userLoginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authMyInfoGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authMyInfoGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserRegisterRequest} [userRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRegisterPost(userRegisterRequest?: UserRegisterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRegisterPost(userRegisterRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {UserLoginRequest} [userLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost(userLoginRequest?: UserLoginRequest, options?: any): AxiosPromise<JwtToken> {
            return localVarFp.authLoginPost(userLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authMyInfoGet(options?: any): AxiosPromise<User> {
            return localVarFp.authMyInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserRegisterRequest} [userRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterPost(userRegisterRequest?: UserRegisterRequest, options?: any): AxiosPromise<void> {
            return localVarFp.authRegisterPost(userRegisterRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {UserLoginRequest} [userLoginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLoginPost(userLoginRequest?: UserLoginRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLoginPost(userLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authMyInfoGet(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authMyInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserRegisterRequest} [userRegisterRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authRegisterPost(userRegisterRequest?: UserRegisterRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authRegisterPost(userRegisterRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DescriptionGeneratorApi - axios parameter creator
 * @export
 */
export const DescriptionGeneratorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GetGenDescriptionRequest} [getGenDescriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptionGeneratorCreatePost: async (getGenDescriptionRequest?: GetGenDescriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DescriptionGenerator/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getGenDescriptionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DescriptionGeneratorApi - functional programming interface
 * @export
 */
export const DescriptionGeneratorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DescriptionGeneratorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {GetGenDescriptionRequest} [getGenDescriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async descriptionGeneratorCreatePost(getGenDescriptionRequest?: GetGenDescriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneratedDescription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.descriptionGeneratorCreatePost(getGenDescriptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DescriptionGeneratorApi - factory interface
 * @export
 */
export const DescriptionGeneratorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DescriptionGeneratorApiFp(configuration)
    return {
        /**
         * 
         * @param {GetGenDescriptionRequest} [getGenDescriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptionGeneratorCreatePost(getGenDescriptionRequest?: GetGenDescriptionRequest, options?: any): AxiosPromise<GeneratedDescription> {
            return localVarFp.descriptionGeneratorCreatePost(getGenDescriptionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DescriptionGeneratorApi - object-oriented interface
 * @export
 * @class DescriptionGeneratorApi
 * @extends {BaseAPI}
 */
export class DescriptionGeneratorApi extends BaseAPI {
    /**
     * 
     * @param {GetGenDescriptionRequest} [getGenDescriptionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DescriptionGeneratorApi
     */
    public descriptionGeneratorCreatePost(getGenDescriptionRequest?: GetGenDescriptionRequest, options?: AxiosRequestConfig) {
        return DescriptionGeneratorApiFp(this.configuration).descriptionGeneratorCreatePost(getGenDescriptionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet(options?: any): AxiosPromise<void> {
            return localVarFp.healthGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public healthGet(options?: AxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ResumeCreationApi - axios parameter creator
 * @export
 */
export const ResumeCreationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateResumeRequest} [createResumeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeCreationCreatePost: async (createResumeRequest?: CreateResumeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ResumeCreation/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createResumeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeCreationMyDataGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ResumeCreation/myData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeCreationMyResumeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ResumeCreation/myResume`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResumeData} [resumeData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeCreationSaveDataPost: async (resumeData?: ResumeData, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ResumeCreation/saveData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resumeData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResumeData} [resumeData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeCreationSavePost: async (resumeData?: ResumeData, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ResumeCreation/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resumeData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeCreationTemplateSourceGet: async (name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ResumeCreation/templateSource`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResumeCreationApi - functional programming interface
 * @export
 */
export const ResumeCreationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResumeCreationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateResumeRequest} [createResumeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resumeCreationCreatePost(createResumeRequest?: CreateResumeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resumeCreationCreatePost(createResumeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resumeCreationMyDataGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResumeData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resumeCreationMyDataGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resumeCreationMyResumeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResumeData>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resumeCreationMyResumeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResumeData} [resumeData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resumeCreationSaveDataPost(resumeData?: ResumeData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resumeCreationSaveDataPost(resumeData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResumeData} [resumeData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resumeCreationSavePost(resumeData?: ResumeData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resumeCreationSavePost(resumeData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resumeCreationTemplateSourceGet(name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplateSourceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resumeCreationTemplateSourceGet(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ResumeCreationApi - factory interface
 * @export
 */
export const ResumeCreationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResumeCreationApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateResumeRequest} [createResumeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeCreationCreatePost(createResumeRequest?: CreateResumeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.resumeCreationCreatePost(createResumeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeCreationMyDataGet(options?: any): AxiosPromise<ResumeData> {
            return localVarFp.resumeCreationMyDataGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeCreationMyResumeGet(options?: any): AxiosPromise<Array<ResumeData>> {
            return localVarFp.resumeCreationMyResumeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResumeData} [resumeData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeCreationSaveDataPost(resumeData?: ResumeData, options?: any): AxiosPromise<void> {
            return localVarFp.resumeCreationSaveDataPost(resumeData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResumeData} [resumeData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeCreationSavePost(resumeData?: ResumeData, options?: any): AxiosPromise<void> {
            return localVarFp.resumeCreationSavePost(resumeData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeCreationTemplateSourceGet(name?: string, options?: any): AxiosPromise<TemplateSourceResponse> {
            return localVarFp.resumeCreationTemplateSourceGet(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResumeCreationApi - object-oriented interface
 * @export
 * @class ResumeCreationApi
 * @extends {BaseAPI}
 */
export class ResumeCreationApi extends BaseAPI {
    /**
     * 
     * @param {CreateResumeRequest} [createResumeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResumeCreationApi
     */
    public resumeCreationCreatePost(createResumeRequest?: CreateResumeRequest, options?: AxiosRequestConfig) {
        return ResumeCreationApiFp(this.configuration).resumeCreationCreatePost(createResumeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResumeCreationApi
     */
    public resumeCreationMyDataGet(options?: AxiosRequestConfig) {
        return ResumeCreationApiFp(this.configuration).resumeCreationMyDataGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResumeCreationApi
     */
    public resumeCreationMyResumeGet(options?: AxiosRequestConfig) {
        return ResumeCreationApiFp(this.configuration).resumeCreationMyResumeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResumeData} [resumeData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResumeCreationApi
     */
    public resumeCreationSaveDataPost(resumeData?: ResumeData, options?: AxiosRequestConfig) {
        return ResumeCreationApiFp(this.configuration).resumeCreationSaveDataPost(resumeData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResumeData} [resumeData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResumeCreationApi
     */
    public resumeCreationSavePost(resumeData?: ResumeData, options?: AxiosRequestConfig) {
        return ResumeCreationApiFp(this.configuration).resumeCreationSavePost(resumeData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResumeCreationApi
     */
    public resumeCreationTemplateSourceGet(name?: string, options?: AxiosRequestConfig) {
        return ResumeCreationApiFp(this.configuration).resumeCreationTemplateSourceGet(name, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TemplateApi - axios parameter creator
 * @export
 */
export const TemplateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDownloadExampleGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Template/download-example`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} keyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDownloadKeyNameGet: async (keyName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyName' is not null or undefined
            assertParamExists('templateDownloadKeyNameGet', 'keyName', keyName)
            const localVarPath = `/Template/download/{keyName}`
                .replace(`{${"keyName"}}`, encodeURIComponent(String(keyName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateSourceIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('templateSourceIdGet', 'id', id)
            const localVarPath = `/Template/source/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateUploadPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Template/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplateApi - functional programming interface
 * @export
 */
export const TemplateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TemplateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateDownloadExampleGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templateDownloadExampleGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} keyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateDownloadKeyNameGet(keyName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templateDownloadKeyNameGet(keyName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TemplateData>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templateGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateSourceIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplateSourceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templateSourceIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateUploadPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templateUploadPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TemplateApi - factory interface
 * @export
 */
export const TemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TemplateApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDownloadExampleGet(options?: any): AxiosPromise<void> {
            return localVarFp.templateDownloadExampleGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} keyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDownloadKeyNameGet(keyName: string, options?: any): AxiosPromise<void> {
            return localVarFp.templateDownloadKeyNameGet(keyName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateGet(options?: any): AxiosPromise<Array<TemplateData>> {
            return localVarFp.templateGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateSourceIdGet(id: string, options?: any): AxiosPromise<TemplateSourceResponse> {
            return localVarFp.templateSourceIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateUploadPost(options?: any): AxiosPromise<void> {
            return localVarFp.templateUploadPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TemplateApi - object-oriented interface
 * @export
 * @class TemplateApi
 * @extends {BaseAPI}
 */
export class TemplateApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public templateDownloadExampleGet(options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).templateDownloadExampleGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} keyName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public templateDownloadKeyNameGet(keyName: string, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).templateDownloadKeyNameGet(keyName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public templateGet(options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).templateGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public templateSourceIdGet(id: string, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).templateSourceIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public templateUploadPost(options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).templateUploadPost(options).then((request) => request(this.axios, this.basePath));
    }
}


